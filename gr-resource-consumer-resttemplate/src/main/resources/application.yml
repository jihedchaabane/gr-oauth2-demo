server:
  port: 1204

spring:
  application:
    name: gr-resource-consumer-resttemplate

  security:
    oauth2:
      client:
        registration:
          consumer-resttemplate:
            client-id: gr-resource-consumer-resttemplate
            client-secret: consumer-resttemplate
            scope: ms1.read,ms2.read
            authorization-grant-type: client_credentials
            provider: gr-auth-server
        provider:
          gr-auth-server:
            token-uri: http://localhost:8764/oauth2/token

eureka:
  client:
    enabled: true
    fetch-registry: true
    register-with-eureka: true
    registry-fetch-interval-seconds: ${eureka.fetch.seconds:25}
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    preferIpAddress: true
    #----> Remove ipAddress and hostname to let Eureka resolve dynamically
    #ipAddress: ${host.where.docker.ip}
    #----> Optionally, set a non-qualified hostname if needed
    #hostname: ${spring.application.name}
    instance-id: ${spring.application.name}:${random.int}
    metadata-map:
      #----> Indique que ce microservice doit être inclus dans le swagger de 'gr-conf-swagger-aggregator'
      #----> (désactivé par défaut sinon).
      swagger.aggregator.enabled: ${aggregator.eureka.enabled:false}

management:
  endpoints:
    web.exposure.include: "*"
    web.base-path: /actuator
    web.enable.include: health
  endpoint:
    health:
      show-details: ALWAYS


##----> START : uri de gr-conf-swagger-aggregator
swagger-params:
  issuerUri: ${params.oauth2.issuerUri}
  servers:
    liste:
      - uri: http://localhost:${server.port}
        description: Local environment
      - uri: http://10.0.0.137:${server.port}
        description: Development environment
      - uri: http://10.0.0.500:${server.port}
        description: Homologation environment
      - uri: http://10.0.0.500:${server.port}
        description: Production environment
  aggregator:
    enabled: ${aggregator.eureka.enabled:false}
    cors:
      uri: ${params.swaggerAggregator.uri}

###################################################################
#local
host.where.docker.ip: localhost

params:
  eureka:
    uri: http://localhost:8761/eureka/
  oauth2:
    issuerUri: http://localhost:8764
    #----> for SPRINGBOOT-OAUTH2-EXTERNAL-RESTTEMPLATE-CONSUMER until: 
    #----> @TODO try to replace it with eureka discovery alternative.
    #----> .issuer("http://SPRINGBOOT-CONF-STS-AUTHORIZATION-SERVER-DB")
    loadBalancedIssuerUri: http://SPRINGBOOT-CONF-STS-AUTHORIZATION-SERVER-DB
  gateway:
    uri: http://localhost:8766
  gatewayOauth2:
    uri: http://SPRINGBOOT-CONF-GATEWAY-API-OAUTH2
  swaggerAggregator:
    uri: http://localhost:8765  # Didnot work : localhost, 192.168.56.1, GR-OAUTH2-SWAGGER-AGGREGATOR, GR-CONF-SWAGGER-AGGREGATOR
  zipkin:
    uri: http://localhost:9411
  keystore:
    type: PKCS12
    path: file:C:/E/TOOLS/ms2.p12
    password: jihed123
    alias: ms2
  truststore:
    path: C:/E/TOOLS/ms1-truststore.jks
    password: jihed1234
###################################################################
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
    # Activer le mode "try it out" pour tous les endpoints
    try-it-out-enabled: true
    oauth:
      clientId: gr-resource-consumer-resttemplate
      clientSecret: consumer-resttemplate
  show-actuator: false # activer sinon pour voir les endpoints actuator dans le swagger.
###################################################################
caller:
  destination:
    # gr-resource-consumer-resttemplate from swagger.
    client0:
      resourceUri:
      clientId:
      clientSecret:
      scopes:
      registrationId:

## uri/enabled de gr-conf-swagger-aggregator
aggregator.eureka.enabled: true